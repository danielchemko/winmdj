package com.github.danielchemko.winmdj.core.autoobject.stubs


import com.github.danielchemko.winmdj.core.MdObjectMapper
import com.github.danielchemko.winmdj.core.autoobject.BaseWinMdStub
import com.github.danielchemko.winmdj.core.mdspec.AssemblyReference
import com.github.danielchemko.winmdj.core.mdspec.CLRMetadataType
import com.github.danielchemko.winmdj.core.mdspec.WinMdStub
import com.github.danielchemko.winmdj.parser.WinMdNavigator
import javax.annotation.processing.Generated

/**
 * THIS FILE IS AUTOMATICALLY GENERATED BY RegenerateSubs.kt. DO NOT EDIT IT BY HAND
 */

@Generated
class StubAssemblyReferenceImpl(
    objectMapper: MdObjectMapper,
    navigator: WinMdNavigator,
    index: Int
) : AssemblyReference {

    val stub = BaseWinMdStub(objectMapper, navigator, index)

    override fun getStub(): WinMdStub {
        return stub
    }

    override fun getToken(): UInt {
        return stub.getToken(CLRMetadataType.ASSEMBLY_REF)
    }

    override fun getOffset(): UInt {
        return stub.getObjectTableOffset(CLRMetadataType.ASSEMBLY_REF, 0).toUInt()
    }

    override fun copy(rowNum: Int): StubAssemblyReferenceImpl {
        return StubAssemblyReferenceImpl::class.constructors.first()
            .call(stub.getObjectMapper(), stub.getNavigator(), rowNum)
    }

    override fun getAnonymousBlob(): kotlin.ByteArray {
        return stub.lookupBlob(CLRMetadataType.ASSEMBLY_REF, 5)
    }

    override fun getAsPublicKey(): kotlin.ByteArray {
        return stub.lookupBlob(CLRMetadataType.ASSEMBLY_REF, 2)
    }

    override fun getAsToken(): kotlin.UInt {
        return stub.lookupTableValue(CLRMetadataType.ASSEMBLY_REF, 2, kotlin.UInt::class)!!
    }

    override fun getCulture(): kotlin.String {
        return stub.lookupString(CLRMetadataType.ASSEMBLY_REF, 4)
    }

    override fun getFlags(): kotlin.collections.List<com.github.danielchemko.winmdj.core.mdspec.AssemblyFlags> {
        return stub.lookupBitsetEnum(
            CLRMetadataType.ASSEMBLY_REF,
            1,
            com.github.danielchemko.winmdj.core.mdspec.AssemblyFlags::class
        )
    }

    override fun getName(): kotlin.String {
        return stub.lookupString(CLRMetadataType.ASSEMBLY_REF, 3)
    }

    override fun getVersionRaw(): kotlin.ULong {
        return stub.lookupTableValue(CLRMetadataType.ASSEMBLY_REF, 0, kotlin.ULong::class)!!
    }

    override fun getChildTypeReferences(): kotlin.collections.List<com.github.danielchemko.winmdj.core.mdspec.TypeReference> {
        return getStub().computeReverseLookup(
            CLRMetadataType.ASSEMBLY_REF,
            AssemblyReference::class,
            0,
            -1,
            0,
            com.github.danielchemko.winmdj.core.mdspec.TypeReference::class,
            true,
        )!! as kotlin.collections.List<com.github.danielchemko.winmdj.core.mdspec.TypeReference>
    }

    override fun getCustomAttribute(): com.github.danielchemko.winmdj.core.mdspec.CustomAttribute? {
        return getStub().computeReverseLookup(
            CLRMetadataType.ASSEMBLY_REF,
            AssemblyReference::class,
            0,
            -1,
            0,
            com.github.danielchemko.winmdj.core.mdspec.CustomAttribute::class,
            false,
        ) as com.github.danielchemko.winmdj.core.mdspec.CustomAttribute?
    }
}