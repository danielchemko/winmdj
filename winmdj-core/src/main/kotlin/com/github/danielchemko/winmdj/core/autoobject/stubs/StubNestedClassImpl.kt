package com.github.danielchemko.winmdj.core.autoobject.stubs


import com.github.danielchemko.winmdj.core.MdObjectMapper
import com.github.danielchemko.winmdj.core.autoobject.BaseWinMdStub
import com.github.danielchemko.winmdj.core.autoobject.model.CLRMetadataType
import com.github.danielchemko.winmdj.core.mdspec.NestedClass
import com.github.danielchemko.winmdj.core.mdspec.WinMdStub
import com.github.danielchemko.winmdj.parser.WinMdNavigator
import javax.annotation.processing.Generated

/**
 * THIS FILE IS AUTOMATICALLY GENERATED BY RegenerateSubs.kt. DO NOT EDIT IT BY HAND
 */

@Generated
class StubNestedClassImpl(
    objectMapper: MdObjectMapper,
    navigator: WinMdNavigator,
    index: Int
) : NestedClass {

    val stub = BaseWinMdStub(objectMapper, navigator, index)

    override fun getStub(): WinMdStub {
        return stub
    }

    override fun getToken(): UInt {
        return stub.getToken(CLRMetadataType.NESTED_CLASS)
    }

    override fun getOffset(): UInt {
        return stub.getObjectTableOffset(CLRMetadataType.NESTED_CLASS, 0).toUInt()
    }

    override fun copy(rowNum: Int): StubNestedClassImpl {
        return StubNestedClassImpl::class.constructors.first().call(stub.getObjectMapper(), stub.getNavigator(), rowNum)
    }

    override fun getEnclosingType(): com.github.danielchemko.winmdj.core.mdspec.TypeDefinition {
        return stub.lookupConcreteReferent(
            CLRMetadataType.NESTED_CLASS,
            1,
            com.github.danielchemko.winmdj.core.mdspec.TypeDefinition::class
        )!!
    }

    override fun getNestedClass(): com.github.danielchemko.winmdj.core.mdspec.TypeDefinition {
        return stub.lookupConcreteReferent(
            CLRMetadataType.NESTED_CLASS,
            0,
            com.github.danielchemko.winmdj.core.mdspec.TypeDefinition::class
        )!!
    }
}