            package com.github.danielchemko.winmdj.core.autoobject.stubs
            
            
            import com.github.danielchemko.winmdj.core.MdObjectMapper
            import com.github.danielchemko.winmdj.core.autoobject.WinMdStub
            import com.github.danielchemko.winmdj.core.mdspec.CLRMetadataType
            import com.github.danielchemko.winmdj.core.mdspec.*
            import com.github.danielchemko.winmdj.parser.WinMdNavigator
            import javax.annotation.processing.Generated
            
            /**
             * THIS FILE IS AUTOMATICALLY GENERATED BY RegenerateSubs.kt. DO NOT EDIT IT BY HAND
             */
            
            @Generated
            class StubPropertyImpl (
                objectMapper: MdObjectMapper,
                navigator: WinMdNavigator,
                index: Int
            ) : Property {

                private val stub = WinMdStub(objectMapper, navigator, index)
                
                override fun toString(): String {
                   return "Property/${getToken()}"
                }
                
                override fun getStub(): WinMdStub {
                    return stub                   
                }
                
                override fun getRowNumber(): Int {
                    return getStub().getRowNumber()
                }

                override fun getToken(): UInt {
                   return stub.getToken(CLRMetadataType.PROPERTY)
                }
                
                override fun getOffset(): UInt {
                   return stub.getObjectTableOffset(CLRMetadataType.PROPERTY, 0).toUInt()
                }
                
                override fun copy(rowNum: Int?): StubPropertyImpl {
                   return StubPropertyImpl::class.constructors.first().call(stub.getObjectMapper(), stub.getNavigator(), rowNum ?: getRowNumber())
                }
       
            override fun getAttributes(): java.util.BitSet {
    return stub.lookupBitset(CLRMetadataType.PROPERTY, 0)
}

override fun getName(): kotlin.String {
    return stub.lookupString(CLRMetadataType.PROPERTY, 1)
}

                            override fun getPropertyMap(): com.github.danielchemko.winmdj.core.mdspec.PropertyMap {
                                return getStub().computeReverseLookup(
    Property::class,
    1,
    com.github.danielchemko.winmdj.core.mdspec.PropertyMap::class,
    false,
)!! as com.github.danielchemko.winmdj.core.mdspec.PropertyMap
                            }

override fun getSignature(): kotlin.ByteArray {
    return stub.lookupBlob(CLRMetadataType.PROPERTY, 2)
}

                            override fun getConstant(): com.github.danielchemko.winmdj.core.mdspec.Constant? {
                                return getStub().computeReverseLookup(
    Property::class,
    1,
    com.github.danielchemko.winmdj.core.mdspec.Constant::class,
    false,
) as com.github.danielchemko.winmdj.core.mdspec.Constant?
                            }

                            override fun getCustomAttribute(): com.github.danielchemko.winmdj.core.mdspec.CustomAttribute? {
                                return getStub().computeReverseLookup(
    Property::class,
    0,
    com.github.danielchemko.winmdj.core.mdspec.CustomAttribute::class,
    false,
) as com.github.danielchemko.winmdj.core.mdspec.CustomAttribute?
                            }

                            override fun getMethodSemantics(): com.github.danielchemko.winmdj.core.mdspec.MethodSemantics? {
                                return getStub().computeReverseLookup(
    Property::class,
    2,
    com.github.danielchemko.winmdj.core.mdspec.MethodSemantics::class,
    false,
) as com.github.danielchemko.winmdj.core.mdspec.MethodSemantics?
                            }
            }