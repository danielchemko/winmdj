            package com.github.danielchemko.winmdj.core.autoobject.stubs
            
            
            import com.github.danielchemko.winmdj.core.MdObjectMapper
            import com.github.danielchemko.winmdj.core.autoobject.BaseWinMdStub
            import com.github.danielchemko.winmdj.core.autoobject.model.CLRMetadataType
            import com.github.danielchemko.winmdj.core.mdspec.*
            import com.github.danielchemko.winmdj.parser.WinMdNavigator
            import javax.annotation.processing.Generated
            
            /**
             * THIS FILE IS AUTOMATICALLY GENERATED BY RegenerateSubs.kt. DO NOT EDIT IT BY HAND
             */
            
            @Generated
            class StubMethodDefinitionImpl (
                objectMapper: MdObjectMapper,
                navigator: WinMdNavigator,
                index: Int
            ) : MethodDefinition {

                val stub = BaseWinMdStub(objectMapper, navigator, index)
                
                override fun getStub(): WinMdStub {
                    return stub                   
                }

                override fun getToken(): UInt {
                   return stub.getToken(CLRMetadataType.METHOD_DEF)
                }
                
                override fun getOffset(): UInt {
                   return stub.getObjectTableOffset(CLRMetadataType.METHOD_DEF, 0).toUInt()
                }
                
                override fun copy(rowNum: Int): StubMethodDefinitionImpl {
                   return StubMethodDefinitionImpl::class.constructors.first().call(stub.getObjectMapper(), stub.getNavigator(), rowNum)
                }
       
            override fun getAttributes(): java.util.BitSet {
    return stub.lookupBitset(CLRMetadataType.METHOD_DEF, 0)
}

override fun getImplementationAttributes(): java.util.BitSet {
    return stub.lookupBitset(CLRMetadataType.METHOD_DEF, 1)
}

override fun getName(): kotlin.String {
    return stub.lookupString(CLRMetadataType.METHOD_DEF, 3)
}

                            override fun getParameters(): kotlin.collections.List<com.github.danielchemko.winmdj.core.mdspec.Parameter> {
                                val column = 
return stub.lookupList(CLRMetadataType.METHOD_DEF, 5, 1, 1, com.github.danielchemko.winmdj.core.mdspec.Parameter::class)
                            }

                            override fun getParent(): com.github.danielchemko.winmdj.core.mdspec.TypeDefinition {
                                val stubsCursor = getStub().getObjectMapper().getCursor(com.github.danielchemko.winmdj.core.mdspec.MethodDefinition::class.java)
var rowRef = getStub().getRowNumber() - 1;
var highestMethod: com.github.danielchemko.winmdj.core.mdspec.MethodDefinition = this
while (rowRef >= 0) {
    val refMethod = stubsCursor.get(rowRef--)
    if (refMethod.getStub().getObjectTableValue(CLRMetadataType.METHOD_DEF, 4) != getStub().getObjectTableValue(CLRMetadataType.METHOD_DEF, 4)) {
        return getStub().getReverseReferentSingle(CLRMetadataType.TYPE_DEF,  4, com.github.danielchemko.winmdj.core.mdspec.TypeDefinition::class, highestMethod.getToken())!!
    } else {
        highestMethod = refMethod
    }
}
throw IllegalStateException("Unable to find a parent reference for Method:[$highestMethod]")
                            }

override fun getRva(): kotlin.UShort {
    return stub.lookupTableValue(CLRMetadataType.METHOD_DEF, 2, kotlin.UShort::class)!!
}

override fun getSignature(): kotlin.ByteArray {
    return stub.lookupBlob(CLRMetadataType.METHOD_DEF, 4)
}

                            override fun getGenericParameters(): kotlin.collections.List<com.github.danielchemko.winmdj.core.mdspec.GenericParameter> {
                                val selfToken = getStub().getRowNumber()
val foreignCursor = getStub().getObjectMapper().getCursor(com.github.danielchemko.winmdj.core.mdspec.GenericParameter::class.java)

val max = getStub().getNavigator().getCount(CLRMetadataType.GENERIC_PARAM)
return (1 .. max)
   .filter {row-> getStub().getRandomObjectTableValue(CLRMetadataType.GENERIC_PARAM, row, 0) == selfToken }
   .map{row->foreignCursor.get(row)}.toList()
                            }

                            override fun getSecurityAttribute(): com.github.danielchemko.winmdj.core.mdspec.SecurityAttribute? {
                                val stubsCursor = getStub().getObjectMapper().getCursor(com.github.danielchemko.winmdj.core.mdspec.MethodDefinition::class.java)
var rowRef = getStub().getRowNumber() - 1;
var highestMethod: com.github.danielchemko.winmdj.core.mdspec.MethodDefinition = this
return getStub().getReverseReferentSingle(CLRMetadataType.DECL_SECURITY, -1, com.github.danielchemko.winmdj.core.mdspec.SecurityAttribute::class, highestMethod.getToken())
                            }
            }